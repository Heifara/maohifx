package com.maohi.software.maohifx.product.bean;
// Generated 8 janv. 2016 12:27:52 by Hibernate Tools 4.0.0

import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;

import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

/**
 * ProductPackaging generated by hbm2java
 */

@Entity
@Table(name = "product_packaging")
@JsonIgnoreProperties({ "product" })
public class ProductPackaging implements java.io.Serializable {

	private static final long serialVersionUID = 1L;

	private ProductPackagingId id;
	private Packaging packaging;
	private Product product;
	private Date creationDate;
	private Date updateDate;
	private Boolean main;
	private Double sellingPrice;
	private Set<ProductPackagingBarcode> productPackagingBarcodes = new HashSet<>(0);
	private Set<ProductPackagingLot> productPackagingLots = new HashSet<>(0);

	public ProductPackaging() {
	}

	public ProductPackaging(final ProductPackagingId id, final Packaging packaging, final Product product) {
		this.id = id;
		this.packaging = packaging;
		this.product = product;
	}

	public ProductPackaging(final ProductPackagingId id, final Packaging packaging, final Product product, final Date creationDate, final Date updateDate, final Boolean default_, final Double sellingPrice, final Set<ProductPackagingBarcode> productPackagingBarcodes, final Set<ProductPackagingLot> productPackagingLots) {
		this.id = id;
		this.packaging = packaging;
		this.product = product;
		this.creationDate = creationDate;
		this.updateDate = updateDate;
		this.main = default_;
		this.sellingPrice = sellingPrice;
		this.productPackagingBarcodes = productPackagingBarcodes;
		this.productPackagingLots = productPackagingLots;
	}

	public ProductPackagingBarcode add(final Barcode aBarcode) {
		if (!this.contains(aBarcode)) {
			final ProductPackagingBarcode iProductPackagingBarcode = new ProductPackagingBarcode();
			iProductPackagingBarcode.setId(new ProductPackagingBarcodeId(this.id.getProductUuid(), this.id.getPackagingCode(), aBarcode.getCode()));
			iProductPackagingBarcode.setProductPackaging(this);
			iProductPackagingBarcode.setBarcode(aBarcode);
			iProductPackagingBarcode.setCreationDate(new Date());
			iProductPackagingBarcode.setUpdateDate(new Date());
			this.productPackagingBarcodes.add(iProductPackagingBarcode);
			return iProductPackagingBarcode;
		}
		return null;
	}

	/**
	 * Add a {@link ProductPackagingLot}. The Id is index of the element in the list
	 *
	 * @param aCostPrice
	 *            the cost price
	 * @param aWeightedAverageCostPrice
	 *            the average cost price
	 * @param aBestBefore
	 *            the best before date
	 * @param aQuantity
	 * @return the added item
	 */
	public ProductPackagingLot add(final double aCostPrice, final double aWeightedAverageCostPrice, final Date aBestBefore, final double aQuantity) {
		final ProductPackagingLot iLot = new ProductPackagingLot(new ProductPackagingLotId(), this);
		iLot.setCostPrice(aCostPrice);
		iLot.setWeightedAverageCostPrice(aWeightedAverageCostPrice);
		iLot.setBestBefore(aBestBefore);
		iLot.setCreationDate(new Date());
		iLot.setUpdateDate(new Date());

		final int iIndexOf = this.getProductPackagingLots().size();
		this.getProductPackagingLots().add(iLot);

		iLot.getId().setLot(iIndexOf);
		iLot.getId().setProductPackagingPackagingCode(this.id.getPackagingCode());
		iLot.getId().setProductPackagingProductUuid(this.id.getProductUuid());

		iLot.add(aQuantity);

		return iLot;
	}

	public boolean contains(final Barcode aBarcode) {
		for (final ProductPackagingBarcode iProductPackagingBarcode : this.productPackagingBarcodes) {
			if (iProductPackagingBarcode.getBarcode().equals(aBarcode)) {
				return true;
			}
		}
		return false;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "creation_date", length = 19)
	public Date getCreationDate() {
		return this.creationDate;
	}

	@EmbeddedId
	@AttributeOverrides({ @AttributeOverride(name = "productUuid", column = @Column(name = "product_uuid", nullable = false) ), @AttributeOverride(name = "packagingCode", column = @Column(name = "packaging_code", nullable = false, length = 45) ) })
	public ProductPackagingId getId() {
		return this.id;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "packaging_code", nullable = false, insertable = false, updatable = false)
	public Packaging getPackaging() {
		return this.packaging;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "product_uuid", nullable = false, insertable = false, updatable = false)
	public Product getProduct() {
		return this.product;
	}

	@Transient
	public ProductPackagingBarcode getProductPackagingBarcode(final Barcode aBarcode) {
		final Iterator<ProductPackagingBarcode> iIterator = this.productPackagingBarcodes.iterator();
		while (iIterator.hasNext()) {
			final ProductPackagingBarcode iProductPackagingBarcode = iIterator.next();
			if (iProductPackagingBarcode.getBarcode().equals(aBarcode)) {
				return iProductPackagingBarcode;
			}
		}

		return null;
	}

	@OneToMany(fetch = FetchType.EAGER, mappedBy = "productPackaging", cascade = CascadeType.ALL, orphanRemoval = true)
	public Set<ProductPackagingBarcode> getProductPackagingBarcodes() {
		return this.productPackagingBarcodes;
	}

	public ProductPackagingLot getProductPackagingLot(final int aLotId) {
		final Iterator<ProductPackagingLot> iIterator = this.getProductPackagingLots().iterator();
		while (iIterator.hasNext()) {
			final ProductPackagingLot iProductPackagingLot = iIterator.next();
			if (aLotId == iProductPackagingLot.getId().getLot()) {
				return iProductPackagingLot;
			}
		}
		return null;
	}

	@OneToMany(fetch = FetchType.EAGER, mappedBy = "productPackaging", cascade = CascadeType.ALL, orphanRemoval = true)
	public Set<ProductPackagingLot> getProductPackagingLots() {
		return this.productPackagingLots;
	}

	@Column(name = "selling_price", precision = 22, scale = 0)
	public Double getSellingPrice() {
		return this.sellingPrice;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "update_date", length = 19)
	public Date getUpdateDate() {
		return this.updateDate;
	}

	/**
	 * Return the index of
	 *
	 * @param aItem
	 *            the item to find
	 * @return -1 if not found
	 */
	public int indexOf(final ProductPackagingLot aItem) {
		final Iterator<ProductPackagingLot> iIterator = this.getProductPackagingLots().iterator();

		int iIndexOf = -1;
		while (iIterator.hasNext()) {
			iIndexOf++;
			final ProductPackagingLot iProductPackagingLot = iIterator.next();
			if (aItem.equals(iProductPackagingLot)) {
				return iIndexOf;
			}
		}
		return -1;
	}

	@Column(name = "main")
	public Boolean isMain() {
		return this.main;
	}

	public ProductPackagingBarcode remove(final Barcode aBarcode) {
		final ProductPackagingBarcode iProductPackagingBarcode = this.getProductPackagingBarcode(aBarcode);
		if (iProductPackagingBarcode != null) {
			this.productPackagingBarcodes.remove(iProductPackagingBarcode);
			return iProductPackagingBarcode;
		} else {
			return null;
		}
	}

	public void setCreationDate(final Date creationDate) {
		this.creationDate = creationDate;
	}

	public void setId(final ProductPackagingId id) {
		this.id = id;
	}

	public void setMain(final Boolean aMain) {
		this.main = aMain;
	}

	public void setPackaging(final Packaging packaging) {
		this.packaging = packaging;
	}

	public void setProduct(final Product product) {
		this.product = product;
	}

	public void setProductPackagingBarcodes(final Set<ProductPackagingBarcode> productPackagingBarcodes) {
		this.productPackagingBarcodes = productPackagingBarcodes;
	}

	public void setProductPackagingLots(final Set<ProductPackagingLot> productPackagingLots) {
		this.productPackagingLots = productPackagingLots;
	}

	public void setSellingPrice(final Double sellingPrice) {
		this.sellingPrice = sellingPrice;
	}

	public void setUpdateDate(final Date updateDate) {
		this.updateDate = updateDate;
	}

}
