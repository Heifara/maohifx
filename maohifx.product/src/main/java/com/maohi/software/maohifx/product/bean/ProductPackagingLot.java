package com.maohi.software.maohifx.product.bean;
// Generated 14 janv. 2016 09:57:06 by Hibernate Tools 4.0.0

import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;

import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.JoinColumns;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

/**
 * ProductPackagingLot generated by hbm2java
 */
@Entity
@Table(name = "product_packaging_lot")
@JsonIgnoreProperties({ "productPackaging", "productPackagingMovements" })
public class ProductPackagingLot implements java.io.Serializable {

	private static final long serialVersionUID = 1L;

	private ProductPackagingLotId id;
	private ProductPackaging productPackaging;
	private Date creationDate;
	private Date updateDate;
	private Double costPrice;
	private Double weightedAverageCostPrice;
	private Date bestBefore;
	private Set<ProductPackagingMovement> productPackagingMovements = new HashSet<>(0);

	public ProductPackagingLot() {
	}

	public ProductPackagingLot(final ProductPackagingLotId id, final ProductPackaging productPackaging) {
		this.id = id;
		this.productPackaging = productPackaging;
	}

	public ProductPackagingLot(final ProductPackagingLotId id, final ProductPackaging productPackaging, final Date creationDate, final Date updateDate, final Double costPrice, final Double weightedAverageCostPrice, final Date bestBefore) {
		this.id = id;
		this.productPackaging = productPackaging;
		this.creationDate = creationDate;
		this.updateDate = updateDate;
		this.costPrice = costPrice;
		this.weightedAverageCostPrice = weightedAverageCostPrice;
		this.bestBefore = bestBefore;
	}

	public ProductPackagingMovement add(final double aQuantity) {
		final ProductPackagingMovement iMovement = new ProductPackagingMovement(new ProductPackagingMovementId(), this);
		iMovement.setProductPackagingLot(this);
		iMovement.setQuantity(aQuantity);
		iMovement.setCreationDate(new Date());
		iMovement.setUpdateDate(new Date());

		final int iIndexOf = this.getProductPackagingMovements().size();
		this.getProductPackagingMovements().add(iMovement);

		iMovement.getId().setId(iIndexOf);
		iMovement.getId().setLot(this.id.getLot());
		iMovement.getId().setPackagingCode(this.id.getProductPackagingPackagingCode());
		iMovement.getId().setProductUuid(this.id.getProductPackagingProductUuid());

		return iMovement;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "best_before", length = 19)
	public Date getBestBefore() {
		return this.bestBefore;
	}

	@Column(name = "cost_price", precision = 22, scale = 0)
	public Double getCostPrice() {
		return this.costPrice;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "creation_date", length = 19)
	public Date getCreationDate() {
		return this.creationDate;
	}

	@EmbeddedId
	@AttributeOverrides({ @AttributeOverride(name = "lot", column = @Column(name = "lot", nullable = false) ), @AttributeOverride(name = "productPackagingPackagingCode", column = @Column(name = "product_packaging_packaging_code", nullable = false, length = 45) ), @AttributeOverride(name = "productPackagingProductUuid", column = @Column(name = "product_packaging_product_uuid", nullable = false) ) })
	public ProductPackagingLotId getId() {
		return this.id;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumns({ @JoinColumn(name = "product_packaging_product_uuid", referencedColumnName = "product_uuid", nullable = false, insertable = false, updatable = false), @JoinColumn(name = "product_packaging_packaging_code", referencedColumnName = "packaging_code", nullable = false, insertable = false, updatable = false) })
	public ProductPackaging getProductPackaging() {
		return this.productPackaging;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "productPackagingLot", cascade = CascadeType.ALL)
	public Set<ProductPackagingMovement> getProductPackagingMovements() {
		return this.productPackagingMovements;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "update_date", length = 19)
	public Date getUpdateDate() {
		return this.updateDate;
	}

	@Column(name = "weighted_average_cost_price", precision = 22, scale = 0)
	public Double getWeightedAverageCostPrice() {
		return this.weightedAverageCostPrice;
	}

	public int indexOf(final ProductPackagingMovement aMovement) {
		int iIndex = -1;
		final Iterator<ProductPackagingMovement> iIterator = this.getProductPackagingMovements().iterator();
		while (iIterator.hasNext()) {
			iIndex++;
			final ProductPackagingMovement iProductPackagingMovement = iIterator.next();
			if (aMovement.equals(iProductPackagingMovement)) {
				return iIndex;
			}
		}
		return -1;
	}

	public void setBestBefore(final Date bestBefore) {
		this.bestBefore = bestBefore;
	}

	public void setCostPrice(final Double costPrice) {
		this.costPrice = costPrice;
	}

	public void setCreationDate(final Date creationDate) {
		this.creationDate = creationDate;
	}

	public void setId(final ProductPackagingLotId id) {
		this.id = id;
	}

	public void setProductPackaging(final ProductPackaging productPackaging) {
		this.productPackaging = productPackaging;
	}

	public void setProductPackagingMovements(final Set<ProductPackagingMovement> productPackagingMovements) {
		this.productPackagingMovements = productPackagingMovements;
	}

	public void setUpdateDate(final Date updateDate) {
		this.updateDate = updateDate;
	}

	public void setWeightedAverageCostPrice(final Double weightedAverageCostPrice) {
		this.weightedAverageCostPrice = weightedAverageCostPrice;
	}

}
