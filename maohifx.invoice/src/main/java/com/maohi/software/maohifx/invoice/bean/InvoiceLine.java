package com.maohi.software.maohifx.invoice.bean;
// Generated 24 juil. 2015 10:26:57 by Hibernate Tools 4.0.0

import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

/**
 * InvoiceLine generated by hbm2java
 */
@Entity
@Table(name = "invoice_line")
@JsonIgnoreProperties({ "invoice" })
public class InvoiceLine implements java.io.Serializable {

	private static final long serialVersionUID = 1L;

	private String uuid;

	private Invoice invoice;

	private Date creationDate;
	private Date updateDate;
	private Integer position;
	private String label;
	private Double sellingPrice;

	public InvoiceLine() {
	}

	public InvoiceLine(final String uuid, final Invoice invoice) {
		this.uuid = uuid;
		this.invoice = invoice;
	}

	public InvoiceLine(final String uuid, final Invoice invoice, final Date creationDate, final Date updateDate, final Integer position, final String label, final Double sellingPrice) {
		this.uuid = uuid;
		this.invoice = invoice;
		this.creationDate = creationDate;
		this.updateDate = updateDate;
		this.position = position;
		this.label = label;
		this.sellingPrice = sellingPrice;
	}

	@Override
	public boolean equals(final Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (this.getClass() != obj.getClass()) {
			return false;
		}
		final InvoiceLine other = (InvoiceLine) obj;
		if (this.creationDate == null) {
			if (other.creationDate != null) {
				return false;
			}
		} else if (!this.creationDate.equals(other.creationDate)) {
			return false;
		}
		if (this.invoice == null) {
			if (other.invoice != null) {
				return false;
			}
		} else if (!this.invoice.equals(other.invoice)) {
			return false;
		}
		if (this.label == null) {
			if (other.label != null) {
				return false;
			}
		} else if (!this.label.equals(other.label)) {
			return false;
		}
		if (this.position == null) {
			if (other.position != null) {
				return false;
			}
		} else if (!this.position.equals(other.position)) {
			return false;
		}
		if (this.sellingPrice == null) {
			if (other.sellingPrice != null) {
				return false;
			}
		} else if (!this.sellingPrice.equals(other.sellingPrice)) {
			return false;
		}
		if (this.updateDate == null) {
			if (other.updateDate != null) {
				return false;
			}
		} else if (!this.updateDate.equals(other.updateDate)) {
			return false;
		}
		if (this.uuid == null) {
			if (other.uuid != null) {
				return false;
			}
		} else if (!this.uuid.equals(other.uuid)) {
			return false;
		}
		return true;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "creation_date", length = 19)
	public Date getCreationDate() {
		return this.creationDate;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "invoice_uuid", nullable = false)
	public Invoice getInvoice() {
		return this.invoice;
	}

	@Column(name = "label")
	public String getLabel() {
		return this.label;
	}

	@Column(name = "position")
	public Integer getPosition() {
		return this.position;
	}

	@Column(name = "selling_price", precision = 22, scale = 0)
	public Double getSellingPrice() {
		return this.sellingPrice;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "update_date", length = 19)
	public Date getUpdateDate() {
		return this.updateDate;
	}

	@Id

	@Column(name = "uuid", unique = true, nullable = false)
	public String getUuid() {
		return this.uuid;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = (prime * result) + ((this.creationDate == null) ? 0 : this.creationDate.hashCode());
		// result = (prime * result) + ((this.invoice == null) ? 0 : this.invoice.hashCode());
		result = (prime * result) + ((this.label == null) ? 0 : this.label.hashCode());
		result = (prime * result) + ((this.position == null) ? 0 : this.position.hashCode());
		result = (prime * result) + ((this.sellingPrice == null) ? 0 : this.sellingPrice.hashCode());
		result = (prime * result) + ((this.updateDate == null) ? 0 : this.updateDate.hashCode());
		result = (prime * result) + ((this.uuid == null) ? 0 : this.uuid.hashCode());
		return result;
	}

	public void setCreationDate(final Date creationDate) {
		this.creationDate = creationDate;
	}

	public void setInvoice(final Invoice invoice) {
		this.invoice = invoice;
	}

	public void setLabel(final String label) {
		this.label = label;
	}

	public void setPosition(final Integer position) {
		this.position = position;
	}

	public void setSellingPrice(final Double sellingPrice) {
		this.sellingPrice = sellingPrice;
	}

	public void setUpdateDate(final Date updateDate) {
		this.updateDate = updateDate;
	}

	public void setUuid(final String uuid) {
		this.uuid = uuid;
	}

	@Override
	public String toString() {
		final StringBuilder builder = new StringBuilder();
		builder.append("InvoiceLine [");
		if (this.uuid != null) {
			builder.append("uuid=");
			builder.append(this.uuid);
			builder.append(", ");
		}
		if (this.invoice != null) {
			builder.append("invoice=");
			builder.append(this.invoice);
			builder.append(", ");
		}
		if (this.creationDate != null) {
			builder.append("creationDate=");
			builder.append(this.creationDate);
			builder.append(", ");
		}
		if (this.updateDate != null) {
			builder.append("updateDate=");
			builder.append(this.updateDate);
			builder.append(", ");
		}
		if (this.position != null) {
			builder.append("position=");
			builder.append(this.position);
			builder.append(", ");
		}
		if (this.label != null) {
			builder.append("label=");
			builder.append(this.label);
			builder.append(", ");
		}
		if (this.sellingPrice != null) {
			builder.append("sellingPrice=");
			builder.append(this.sellingPrice);
			builder.append(", ");
		}
		builder.append("]");
		return builder.toString();
	}

}
